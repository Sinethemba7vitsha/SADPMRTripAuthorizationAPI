// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SADPMRCarAPI.Data;

#nullable disable

namespace SADPMRCarAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230719103800_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.ApplicationUserIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.CarAccessories", b =>
                {
                    b.Property<int>("CarAccessoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarAccessoriesId"), 1L, 1);

                    b.Property<bool>("Jack")
                        .HasColumnType("bit");

                    b.Property<int>("OdometerArrival")
                        .HasColumnType("int");

                    b.Property<int>("OdometerDepart")
                        .HasColumnType("int");

                    b.Property<byte[]>("PetrolReceiptData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("PullRod")
                        .HasColumnType("bit");

                    b.Property<bool>("SpareWheel")
                        .HasColumnType("bit");

                    b.Property<byte[]>("TollGateReceiptData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Triangle")
                        .HasColumnType("bit");

                    b.HasKey("CarAccessoriesId");

                    b.ToTable("CarAccessories");
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.CarModel", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"), 1L, 1);

                    b.Property<int?>("CarAccessoriesId")
                        .HasColumnType("int");

                    b.Property<int?>("CarServiceId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("MakeOfTheCar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationOfTheCar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarId");

                    b.HasIndex("CarAccessoriesId");

                    b.HasIndex("CarServiceId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarId = 1,
                            DepartmentId = 2,
                            MakeOfTheCar = "Toyota Hilux",
                            RegistrationOfTheCar = "SAD 756 GP"
                        },
                        new
                        {
                            CarId = 2,
                            DepartmentId = 1,
                            MakeOfTheCar = "Ford Ranger",
                            RegistrationOfTheCar = "PMR 005 GP"
                        },
                        new
                        {
                            CarId = 3,
                            DepartmentId = 3,
                            MakeOfTheCar = "VW Amarok",
                            RegistrationOfTheCar = "SDT 586 GP"
                        });
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.CarServiceModel", b =>
                {
                    b.Property<int>("CarServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarServiceId"), 1L, 1);

                    b.Property<bool>("CarAvailability")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfTheService")
                        .HasColumnType("datetime2");

                    b.HasKey("CarServiceId");

                    b.ToTable("CarServices");
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "Administration"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Diamond Trade"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Regulatory Compliance"
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "Finance"
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentName = "Licensing"
                        });
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.JobTitle", b =>
                {
                    b.Property<int?>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("JobTitleId"), 1L, 1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTitleId");

                    b.ToTable("jobTitles");

                    b.HasData(
                        new
                        {
                            JobTitleId = 1,
                            Title = "Staff"
                        },
                        new
                        {
                            JobTitleId = 2,
                            Title = "Manager"
                        },
                        new
                        {
                            JobTitleId = 3,
                            Title = "General Manager Administration"
                        },
                        new
                        {
                            JobTitleId = 4,
                            Title = "General Manager Diamond Trade"
                        },
                        new
                        {
                            JobTitleId = 5,
                            Title = "General Manager Licensing"
                        },
                        new
                        {
                            JobTitleId = 6,
                            Title = "General Manager Regulatory Compliance"
                        },
                        new
                        {
                            JobTitleId = 7,
                            Title = "General Manager Finance"
                        },
                        new
                        {
                            JobTitleId = 8,
                            Title = "CEO"
                        },
                        new
                        {
                            JobTitleId = 9,
                            Title = "Admin For Administration"
                        },
                        new
                        {
                            JobTitleId = 10,
                            Title = "Admin For Diamond Trade"
                        },
                        new
                        {
                            JobTitleId = 11,
                            Title = "Admin For Licensing"
                        },
                        new
                        {
                            JobTitleId = 12,
                            Title = "Admin For Regulatory Compliance "
                        },
                        new
                        {
                            JobTitleId = 13,
                            Title = "Admin For  Finance"
                        });
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Reject"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Accepted"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Submitted"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "Pending"
                        });
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.TripModel", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"), 1L, 1);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralManagerApprovalUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovedByGeneralManager")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprovedByManager")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerApprovalUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfCoDriver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForTravel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TripId");

                    b.HasIndex("CarId");

                    b.HasIndex("StatusId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.Uploadfile", b =>
                {
                    b.Property<int>("UploadfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UploadfileId"), 1L, 1);

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UploadFileTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UploadfileId");

                    b.ToTable("Uploadfiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SADPMRCarAPI.Model.ApplicationUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SADPMRCarAPI.Model.ApplicationUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SADPMRCarAPI.Model.ApplicationUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SADPMRCarAPI.Model.ApplicationUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.CarModel", b =>
                {
                    b.HasOne("SADPMRCarAPI.Model.CarAccessories", "CarAccessories")
                        .WithMany()
                        .HasForeignKey("CarAccessoriesId");

                    b.HasOne("SADPMRCarAPI.Model.CarServiceModel", "CarService")
                        .WithMany()
                        .HasForeignKey("CarServiceId");

                    b.Navigation("CarAccessories");

                    b.Navigation("CarService");
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.TripModel", b =>
                {
                    b.HasOne("SADPMRCarAPI.Model.CarModel", "Car")
                        .WithMany("TripList")
                        .HasForeignKey("CarId");

                    b.HasOne("SADPMRCarAPI.Model.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SADPMRCarAPI.Model.CarModel", b =>
                {
                    b.Navigation("TripList");
                });
#pragma warning restore 612, 618
        }
    }
}
